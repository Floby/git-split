#/bin/bash

trap "gc_error" SIGINT


SUPER_REPO=`pwd`
SUBPATH=$1


# setup some path vars for our little project
SPLIT_BIN_DIR=$(dirname $(realpath $0))
echo $SPLIT_BIN_DIR
SPLIT_ROOT=$SPLIT_BIN_DIR/..
SPLIT_LIB_DIR=$SPLIT_ROOT/lib

# source our libs
. $SPLIT_LIB_DIR/all.sh

# check that everything is clean
ls -a | grep .git >/dev/null || die 5 "This command must be run at the top level of the working tree"
cd $SUBPATH
    if  ls -a | grep .git >/dev/null; then
        echo "there is already a git repository in" `pwd`
        echo -n "do you want me to remove it? (yes/no) "
        read answer
        if [ "yes" = "$answer" ]; then
            rm -rf .git
        else
            echo aborting command...
            exit 0
        fi
    fi
cd - >/dev/null

# we change the working directory to the main repository
cd $SUPER_REPO;
SUPER_REPO=`pwd`
# test if the thing we're trying to split apart exists at all
test -d $SUBPATH || die_usage 2 "no such subpath: $SUBPATH"
# initialize git repository in subpath
cd $SUBPATH
    git init
    SUB_REPO=`pwd`
cd - >/dev/null

# ↓ thing are happening here ↓ head over lib/commit.sh
new_head=$(translate_commit `deref_commit HEAD` $SUB_REPO $SUBPATH)

# make the port clean by creating branches and reading the tree
# into the index
cd $SUB_REPO
    git branch master $new_head
    git read-tree master
cd - >/dev/null

